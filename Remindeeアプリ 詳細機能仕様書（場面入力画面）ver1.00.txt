  Remindeeアプリ 詳細機能仕様書（場面入力画面）


  本仕様書は、Remindeeアプリケーションの「場面入力画面」を構成するUI要素に焦点を当て、各要素がどのようなイベ
  ントをトリガーし、それに対してシステムがどのように振る舞うかを記述します。この画面は、新しい場面の作成、ま
  たは既存の場面の編集に使用されます。

  ---


  1. 場面入力画面

  場面入力画面は、ユーザーが場面のタイトル、日時、場所、天気、およびその場面に含まれるToDoリストを定
  義・編集するためのインターフェースです。特に、ToDoのピン留め状態を設定する機能が提供されます。


  ##### 1.1. 画面全体の振る舞い


   * イベント: 「新しい場面を作成」ボタンクリック、または既存の場面の編集開始
   * トリガー: ユーザーによるホーム画面からの遷移
   * 振る舞い:
       * 新規作成時: 空の場面データが初期表示されます。
       * 編集時: 選択された場面の既存データ（場面名、日時、場所、天気、背景色、ToDoリスト、ToDoの完了状態、ピ
         ン留め状態など）がロードされ、入力フィールドに表示されます。
       * データの一時保持と永続化: ユーザーが画面上で行ったすべての変更（テキスト入力、選択、項目の追加・削除
         など）は、画面の内部状態に一時的に保持されます。これらの変更は、ユーザーが明示的に「保存」操作を行っ
         た際に初めてlocalStorageに反映され、永続化されます。

  ##### 1.2. 主要なUI要素とインタラクション

  ###### 1.2.1. 場面情報入力領域


   * 構成要素:
       * 場面名入力フィールド: テキスト入力欄
       * 過去の場面リストフィールド: 過去の場面名を表示し、再利用を促すリスト
       * 詳細入力フィールド: テキスト入力欄
       * 日時選択フィールド: 日時ピッカー欄
       * 場所名入力フィールド: テキスト入力欄
       * 天気アイコン: 現在選択されている天気を視覚的に示すアイコン


   * 場面名入力フィールド
       * タイトル: 「場面」
       * イベント: テキスト入力、フォーカスアウト
       * トリガー: ユーザーによるテキスト入力、フィールドからのフォーカス移動
       * 振る舞い:
           1. 未入力の場合、「場面名を入力」というグレーのガイド（プレースホルダー）を表示します。
           2. 入力されたテキストが、現在編集中の場面の「場面名」として一時的に保持されます。
           3. バリデーション:
               * タイミング: フォーカスアウト時、および「保存」ボタンクリック時。
               * ルール: （例: 必須入力ではない、最大文字数50文字など）
               * 失敗時の挙動: （例: エラーメッセージ表示、保存ブロックなど）
           4. サジェスト機能: ユーザーが文字を入力するたびに、過去の場面名の中から入力内容に部分一致するものを
              抽出し、その使用頻度が高い順にサジェストリストとして表示します。
               * サジェストリストは、入力フィールドの下にドロップダウン形式などで表示されます。
               * ユーザーはサジェストリストから項目を選択することで、場面名フィールドに値を自動入力できます。


   * 過去の場面リストフィールド
       * タイトル: なし
       * 構成要素: 過去の場面名が使用頻度順に表示され、各場面名の行末に「リスト」ボタンが表示されます。
       * イベント: 場面情報入力領域の更新、場面名の選択、リストボタンのクリック/タップ
       * トリガー:
         場面名入力フィールドへの入力、ユーザーによる場面名の選択、ユーザーによる「リスト」ボタンの操作
       * 振る舞い:
           1. 場面情報入力領域が更新されると、過去の場面名を使用頻度順に表示します。
           2. 場面名の選択: ユーザーがリストから場面名を選択すると、その場面名が場面名入力フィールドに自動入力
              され、一時的に保持されます。
           3. 「リスト」ボタンのクリック/タップ:
               * 「過去の場面」編集モーダルを表示します。
               * 「過去の場面」編集モーダルでは、過去の場面の削除が可能です。


   * 詳細入力フィールド
       * タイトル: 「詳細」
       * イベント: テキスト入力
       * トリガー: ユーザーによるテキスト入力
       * 振る舞い:
           1. 未入力の場合、「詳細を入力（任意）」というグレーのガイド（プレースホルダー）を表示します。
           2. 入力されたテキストが、現在編集中の場面の「詳細」として一時的に保持されます。


   * 日時選択フィールド
       * タイトル: 「日時」
       * イベント: 日時選択
       * トリガー: ユーザーによる日時ピッカーからの選択
       * 振る舞い:
           1. 選択された日時が、現在編集中の場面の「日時」として一時的に保持されます。
           2. バリデーション:
               * タイミング: 日時選択時、および「保存」ボタンクリック時。
               * ルール: （例: 有効な日時形式であること、過去の日時を選択できないなど）
               * 失敗時の挙動: （例: エラーメッセージ表示など）
           3. 初期値: 新規作成時、初期値として現在日時が設定される場合があります。


   * 場所名入力フィールド
       * タイトル: 「場所」
       * イベント: 場面入力画面表示、テキスト入力、フォーカスアウト
       * トリガー: 場面入力画面の初期表示、ユーザーによるテキスト入力、フィールドからのフォーカス移動
       * 振る舞い:
           1. 初期表示時: システム（ブラウザのGeolocation
              APIなど）より現在の地名を取得し、場所名入力フィールドに初期値として設定します。
               * ユーザーが位置情報の利用を許可した場合にのみ取得を試みます。
               * 地名が取得できない場合、フィールドは空のまま、またはデフォルトのプレースホルダーが表示されま
                 す。
           2. ユーザーによる書き換えと記憶:
               * 現在の地名がユーザーにより書き換えられた場合、システムによる地名（取得した地名）とユーザー地
                 名（ユーザーが入力した地名）を紐づけて記憶します。
               * 次回、同じシステムによる地名が取得された際に、紐づけられたユーザー地名があれば、それを優先し
                 て表示します。
               * （補足: 紐づけの粒度、管理方法、更新・削除、表示優先順位、永続化の場所については別途詳細定義
                 が必要です。）
           3. 入力されたテキストが、現在編集中の場面の「場所」として一時的に保持されます。
           4. バリデーション:
               * タイミング: フォーカスアウト時、および「保存」ボタンクリック時。
               * ルール: （例: 任意入力、文字数制限など）
               * 失敗時の挙動: （例: エラーメッセージ表示など）


   * 天気アイコン
       * イベント: 場面入力画面表示、クリック/タップ
       * トリガー: 場面入力画面の初期表示、ユーザーによるアイコン操作
       * 振る舞い:
           1. 初期表示時:
              システム（外部天気APIなど）より現在の場所の天気を取得し、その天気アイコンを表示します。（現在は未実装のためダミーの天気情報をセットします）
               * 天気データの取得には、場所名入力フィールドの地名情報、またはユーザーの現在地情報を使用します
                 。
               * 取得に失敗した場合、デフォルトのアイコンを表示するか、エラーメッセージを表示します。
           2. クリック/タップ時: 天気選択用のUI（例: 天気アイコンのリスト、ドロップダウン）が表示されます。
           3. ユーザーがリストから新しい天気を選択すると、アイコンが選択された天気を視覚的に示すものに変化しま
              す。
           4. 選択された天気情報は、現在編集中の場面のデータとして一時的に保持されます。

  ###### 1.2.2. ToDoリスト管理領域


   場面入力画面では完了状態を設定・表示せず、ホーム画面でのみ設定・表示する。

   * 構成要素:
       * タイトル: 「やること」
       * 「ToDoを追加」ボタン
       * 各ToDo項目:
           * ToDoテキスト入力フィールド
           * 背景色アイコン
           * ピンアイコン
           * サブToDo追加ボタン
           * サブToDoリスト（存在する場合）


   * 「ToDoを追加」ボタン
       * イベント: クリック/タップ
       * トリガー: ユーザーによるボタン操作
       * 振る舞い:
           1. 新しい空のToDo項目がリストの末尾に追加されます。
           2. 追加されたToDo項目のテキスト入力フィールドに自動的にフォーカスが移動します。
           3. 新しいToDoのデフォルトのピン留め状態はfalseです。


   * ToDoテキスト入力フィールド (各ToDo項目内)
       * イベント: テキスト入力、フォーカスアウト
       * トリガー: ユーザーによるテキスト入力、フィールドからのフォーカス移動
       * 振る舞い:
           1. 初期化状態では「やることを入力」というグレーのガイド（プレースホルダー）を表示します。
           2. 入力されたテキストが、該当するToDo項目の「ToDoテキスト」として一時的に保持されます。
           3. バリデーション:
               * タイミング: フォーカスアウト時、および「保存」ボタンクリック時。
               * ルール: （例: 必須入力、文字数制限など）
               * 失敗時の挙動: （例: エラーメッセージ表示など）


   * 背景色アイコン (各ToDo項目内)
       * イベント: クリック/タップ
       * トリガー: ユーザーによるアイコン操作
       * 振る舞い:
           1. カラーピッカー、または色の選択肢が表示されるUIが表示されます。
           2. ユーザーが色を選択すると、該当するToDo項目の背景色がプレビューとして即座に反映されます。
           3. 選択された背景色は、該当するToDo項目のデータとして一時的に保持されます。


   * ピンアイコン (各ToDo項目内)
       * 配置: 背景色アイコンとサブToDo追加ボタンの間に配置されます。
       * イベント: クリック/タップ
       * トリガー: ユーザーによるピンアイコンの切り替え
       * 振る舞い:
           1. 該当するToDo項目のピン留め状態（isPinned）を切り替えます（true/false）。
           2. ピンアイコンの表示スタイルが変更されます（例: 塗りつぶし/線画）。
           3. 該当するToDoおよびサブToDoの背景色を、ピン留めされた場合は[具体的な色]に、ピン解除された場合は元
              の背景色に切り替えます。
           4. この変更は、画面内で一時的に保持され、保存操作時にlocalStorageに反映されます。


   * サブToDo追加ボタン (各ToDo項目内)
       * イベント: クリック/タップ
       * トリガー: ユーザーによるボタン操作
       * 振る舞い:
           1. 該当する親ToDoの下に、新しい空のサブToDo項目が追加されます。
           2. 追加されたサブToDo項目のテキスト入力フィールドに自動的にフォーカスが移動します。
           3. 新しいサブToDoのデフォルトのピン留め状態はfalseです。


   * サブToDoテキスト入力フィールド (各サブToDo項目内)
       * イベント: テキスト入力、フォーカスアウト
       * トリガー: ユーザーによるテキスト入力、フィールドからのフォーカス移動
       * 振る舞い:
           1. 入力されたテキストが、該当するサブToDo項目の「サブToDoテキスト」として一時的に保持されます。
           2. バリデーション:
               * タイミング: フォーカスアウト時、および「保存」ボタンクリック時。
               * ルール: （例: 必須入力、文字数制限など）
               * 失敗時の挙動: （例: エラーメッセージ表示など）

  ###### 1.2.3. アクションボタン領域

   * 構成要素:
       * 「保存」ボタン
       * 「キャンセル」ボタン


   * 「保存」ボタン
       * イベント: クリック/タップ
       * トリガー: ユーザーによるボタン操作
       * 振る舞い:
           1. 入力された場面名、日時、場所、天気、背景色、およびToDoリスト（ToDoテキスト、完了状態、ピン留め状
              態、サブToDoを含む）のバリデーションを最終的に実行します。
           2. ToDoおよびサブToDoの削除:
              テキストが入力されていない（空白の）ToDoおよびサブToDoは、保存時にリストから削除されます。
           3. バリデーションに成功した場合、現在編集中の場面データをlocalStorageに保存または更新します。
           4. 保存後、ユーザーはホーム画面に遷移します。
           5. バリデーションに失敗した場合、エラーメッセージが表示され、保存は実行されません。


   * 「キャンセル」ボタン
       * イベント: クリック/タップ
       * トリガー: ユーザーによるボタン操作
       * 振る舞い:
           1. 画面上のいずれかの項目に新規入力または変更があった場合:
               * 確認ダイアログが表示されます（例: 「変更を破棄してよろしいですか？」）。
               * ユーザーがキャンセルを承認した場合、現在の画面でのすべての変更を破棄し、ホーム画面に遷移しま
                 す。
               * ユーザーがキャンセルを承認しなかった場合（ダイアログを閉じた場合）、編集中の場面入力画面に戻
                 ります。
               * localStorageのデータは変更されません。
           2. 場面編集画面で、かつどの項目も変更がなかった場合:
               * 確認ダイアログは表示されず、直接ホーム画面に遷移します。
               * localStorageのデータは変更されません。
